{
  "cerulean/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"cerulean\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the CERULEAN theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include cerulean.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include cerulean.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include cerulean.dark-theme;\n}\n*/",
  "cerulean/cerulean.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "cerulean/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// CERULEAN\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      #333,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $orange-invert,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"primary-dark\": (\n      #317eac,\n      $white-ter,\n    ),\n    \"info-invert\": (\n      #333,\n      $white-ter,\n    ),\n    \"warning-invert\": (\n      $orange-invert,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "cerulean/overrides.scss": "// SCSS Overrides for CERULEAN Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "cyborg/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"cyborg\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the CYBORG theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include cyborg.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include cyborg.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include cyborg.dark-theme;\n}\n*/",
  "cyborg/cyborg.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "cyborg/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// CYBORG\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"primary-light\": (\n      color.adjust($primary, $lightness: 10%),\n      $white-ter,\n    ),\n    \"link-hover\": (\n      $primary-light,\n      $white-ter,\n    ),\n    \"link-focus\": (\n      $primary-light,\n      $white-ter,\n    ),\n    \"link-active\": (\n      $primary-light,\n      $white-ter,\n    ),\n    \"link-hover-border\": (\n      $grey-dark,\n      $white-ter,\n    ),\n    \"link-active-border\": (\n      $grey,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "cyborg/overrides.scss": "// SCSS Overrides for CYBORG Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "darkly/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"darkly\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the DARKLY theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include darkly.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include darkly.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include darkly.dark-theme;\n}\n*/",
  "darkly/darkly.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "darkly/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// DARKLY\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"link-hover\": (\n      color.adjust($link, $lightness: 5),\n      $white-ter,\n    ),\n    \"link-focus\": (\n      color.adjust($link, $lightness: -5%),\n      $white-ter,\n    ),\n    \"link-active\": (\n      color.adjust($link, $lightness: -5%),\n      $white-ter,\n    ),\n    \"link-focus-border\": (\n      $grey-light,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "darkly/overrides.scss": "// SCSS Overrides for DARKLY Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "flatly/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"flatly\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the FLATLY theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include flatly.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include flatly.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include flatly.dark-theme;\n}\n*/",
  "flatly/flatly.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "flatly/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// FLATLY\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"link-hover\": (\n      color.adjust($link, $lightness: -10%),\n      $white-ter,\n    ),\n    \"link-focus\": (\n      color.adjust($link, $lightness: -10%),\n      $white-ter,\n    ),\n    \"link-active\": (\n      color.adjust($link, $lightness: -10%),\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "flatly/overrides.scss": "// SCSS Overrides for FLATLY Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "journal/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"journal\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the JOURNAL theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include journal.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include journal.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include journal.dark-theme;\n}\n*/",
  "journal/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// JOURNAL\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "journal/journal.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "journal/overrides.scss": "// SCSS Overrides for JOURNAL Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "litera/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"litera\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the LITERA theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include litera.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include litera.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include litera.dark-theme;\n}\n*/",
  "litera/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// LITERA\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "litera/litera.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "litera/overrides.scss": "// SCSS Overrides for LITERA Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "lumen/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"lumen\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the LUMEN theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include lumen.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include lumen.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include lumen.dark-theme;\n}\n*/",
  "lumen/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// LUMEN\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      #fff,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"info-invert\": (\n      #fff,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "lumen/lumen.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "lumen/overrides.scss": "// SCSS Overrides for LUMEN Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "lux/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"lux\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the LUX theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include lux.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include lux.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include lux.dark-theme;\n}\n*/",
  "lux/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// LUX\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "lux/lux.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "lux/overrides.scss": "// SCSS Overrides for LUX Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "materia/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"materia\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the MATERIA theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include materia.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include materia.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include materia.dark-theme;\n}\n*/",
  "materia/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// MATERIA\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "materia/materia.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "materia/overrides.scss": "// SCSS Overrides for MATERIA Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "minty/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"minty\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the MINTY theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include minty.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include minty.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include minty.dark-theme;\n}\n*/",
  "minty/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// MINTY\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "minty/minty.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "minty/overrides.scss": "// SCSS Overrides for MINTY Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "nuclear/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"nuclear\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the NUCLEAR theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include nuclear.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include nuclear.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include nuclear.dark-theme;\n}\n*/",
  "nuclear/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// NUCLEAR\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "nuclear/nuclear.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "nuclear/overrides.scss": "// SCSS Overrides for NUCLEAR Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "pulse/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"pulse\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the PULSE theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include pulse.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include pulse.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include pulse.dark-theme;\n}\n*/",
  "pulse/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// PULSE\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $orange-invert,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"warning-invert\": (\n      $orange-invert,\n      $white-ter,\n    ),\n    \"link-hover\": (\n      color.adjust($link, $lightness: 5),\n      $white-ter,\n    ),\n    \"link-focus\": (\n      color.adjust($link, $lightness: -10%),\n      $white-ter,\n    ),\n    \"link-active\": (\n      color.adjust($link, $lightness: -10%),\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "pulse/overrides.scss": "// SCSS Overrides for PULSE Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "pulse/pulse.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "sandstone/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"sandstone\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the SANDSTONE theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include sandstone.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include sandstone.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include sandstone.dark-theme;\n}\n*/",
  "sandstone/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// SANDSTONE\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      #fff,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"warning-invert\": (\n      #fff,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "sandstone/overrides.scss": "// SCSS Overrides for SANDSTONE Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "sandstone/sandstone.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "simplex/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"simplex\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the SIMPLEX theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include simplex.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include simplex.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include simplex.dark-theme;\n}\n*/",
  "simplex/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// SIMPLEX\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $orange-invert,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"primary-dark\": (\n      color.adjust($primary, $lightness: -10%),\n      $white-ter,\n    ),\n    \"warning-invert\": (\n      $orange-invert,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "simplex/overrides.scss": "// SCSS Overrides for SIMPLEX Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "simplex/simplex.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "slate/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"slate\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the SLATE theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include slate.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include slate.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include slate.dark-theme;\n}\n*/",
  "slate/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// SLATE\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $grey,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      #fff,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"warning-invert\": (\n      #fff,\n      $white-ter,\n    ),\n    \"link-invert\": (\n      $grey,\n      $white-ter,\n    ),\n    \"link-hover\": (\n      color.adjust($link, $lightness: 5),\n      $white-ter,\n    ),\n    \"link-focus\": (\n      color.adjust($link, $lightness: -5%),\n      $white-ter,\n    ),\n    \"link-active\": (\n      color.adjust($link, $lightness: -15%),\n      $white-ter,\n    ),\n    \"link-focus-border\": (\n      color.adjust($link, $lightness: -5%),\n      $white-ter,\n    ),\n    \"link-active-border\": (\n      $link-focus-border,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "slate/overrides.scss": "// SCSS Overrides for SLATE Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "slate/slate.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "solar/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"solar\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the SOLAR theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include solar.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include solar.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include solar.dark-theme;\n}\n*/",
  "solar/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// SOLAR\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"link-hover\": (\n      $grey-light,\n      $white-ter,\n    ),\n    \"link-hover-border\": (\n      $grey-light,\n      $white-ter,\n    ),\n    \"link-focus\": (\n      color.adjust($grey-light, $lightness: -10%),\n      $white-ter,\n    ),\n    \"link-focus-border\": (\n      $grey-light,\n      $white-ter,\n    ),\n    \"link-active\": (\n      color.adjust($grey-light, $lightness: -10%),\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "solar/overrides.scss": "// SCSS Overrides for SOLAR Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "solar/solar.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "spacelab/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"spacelab\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the SPACELAB theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include spacelab.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include spacelab.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include spacelab.dark-theme;\n}\n*/",
  "spacelab/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// SPACELAB\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      #fff,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"warning-invert\": (\n      #fff,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "spacelab/overrides.scss": "// SCSS Overrides for SPACELAB Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "spacelab/spacelab.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "superhero/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"superhero\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the SUPERHERO theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include superhero.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include superhero.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include superhero.dark-theme;\n}\n*/",
  "superhero/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// SUPERHERO\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $white-ter,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"link-hover\": (\n      $grey-lighter,\n      $white-ter,\n    ),\n    \"link-focus\": (\n      $grey-lighter,\n      $white-ter,\n    ),\n    \"link-active\": (\n      $grey-lighter,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "superhero/overrides.scss": "// SCSS Overrides for SUPERHERO Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "superhero/superhero.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "united/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"united\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the UNITED theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include united.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include united.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include united.dark-theme;\n}\n*/",
  "united/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// UNITED\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $yellow-invert,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"warning-invert\": (\n      $yellow-invert,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "united/overrides.scss": "// SCSS Overrides for UNITED Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "united/united.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}",
  "yeti/bulmaswatch.scss": "@use \"../utilities/setup\";\n@use \"yeti\"; // Import the theme mixin file\n@use \"overrides\"; // Import theme-specific CSS overrides\n@use \"bulma/sass\" as bulma; // Import Bulma 1.0 core (.sass extension)\n// --- End of @use rules ---\n\n// Main entry point for the YETI theme.\n\n// Ensure the paths are correct relative to the new theme directory.\n\n/*! bulmaswatch v1.0.0 | MIT License */ // TODO: Update version as needed\n\n// Apply the theme variables and setup to the :root element\n:root {\n  @include yeti.light-theme; // Apply the light theme mixin\n  @include setup.setup-theme; // Apply general Bulma CSS variable setup\n}\n\n// Optional: Add dark theme application logic if a dark-theme mixin exists\n/*\n@media (prefers-color-scheme: dark) {\n  :root {\n    // @include yeti.dark-theme;\n  }\n}\n[data-theme=\"dark\"],\n.theme-dark {\n  // @include yeti.dark-theme;\n}\n*/",
  "yeti/initial-variables.scss": "@use \"../utilities/functions.scss\" as fn;\n@use \"sass:color\";\n// --- End of @use rules ---\n\n////////////////////////////////////////////////\n// YETI\n////////////////////////////////////////////////\n\n// These imports provide defaults and functions.\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/light-initial-variables.scss\";\n@import \"../utilities/derived-variables.scss\";\n\n// --- Theme Specific Overrides ---\n// These values override the defaults from the imported files.\n$grey-dark: hsl(221, 14%, 29%);\n$grey: hsl(221, 14%, 48%);\n$grey-light: hsl(221, 14%, 71%);\n$grey-lighter: hsl(221, 14%, 86%);\n$family-sans-serif: \"Inter\", \"SF Pro\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$weight-light: 300;\n$weight-normal: 400;\n$weight-bold: 700;\n$radius-small: 0.25rem;\n$radius: 0.375rem;\n$radius-large: 0.75rem;\n$primary: $blue;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$link: $blue;\n$light: $white-ter;\n$dark: $grey-darker;\n\n$my-colors: fn.mergeColorMaps(\n  (\n    \"white\": (\n      hsl(221, 14%, 100%),\n      $grey-darker,\n    ),\n    \"black\": (\n      hsl(221, 14%, 4%),\n      $white-ter,\n    ),\n    \"light\": (\n      $white-ter,\n      $grey-darker,\n    ),\n    \"dark\": (\n      $grey-darker,\n      $white-ter,\n    ),\n    \"primary\": (\n      $blue,\n      $white-ter,\n    ),\n    \"link\": (\n      $blue,\n      $white-ter,\n    ),\n    \"info\": (\n      $cyan,\n      $white-ter,\n    ),\n    \"success\": (\n      $green,\n      $white-ter,\n    ),\n    \"warning\": (\n      $yellow,\n      $orange-invert,\n    ),\n    \"danger\": (\n      $red,\n      $white-ter,\n    ),\n    \"warning-invert\": (\n      $orange-invert,\n      $white-ter,\n    ),\n    \"text\": (\n      transparent,\n      $grey-darker,\n    ),\n  ),\n  $custom-colors // Allows adding more colors via $custom-colors\n);",
  "yeti/overrides.scss": "// SCSS Overrides for YETI Theme\n// This file contains theme-specific CSS rules that go beyond simple variable changes.\n\n// Ensure the paths are correct relative to the new theme directory.\n@import \"../utilities/mixins.scss\"; // Import shared mixins if needed\n@import \"initial-variables\"; // Import theme variables for use in overrides\n\n// -----------------------------------------------------------------------------\n// TODO: Add theme-specific overrides below.\n//\n// Analyze the original theme's _bootswatch.scss (or equivalent) file\n// and adapt the custom CSS rules here. This often requires manual adjustments\n// to work correctly with Bulma 1.0's structure and CSS variables.\n//\n// Example structure (adapt from Cerulean or original theme):\n/*\n@mixin btn-gradient($color) {\n  background-image: linear-gradient(\n    180deg,\n    lighten($color, 8%) 0%,\n    $color 60%,\n    darken($color, 4%) 100%\n  );\n}\n\n.button {\n  font-weight: 400 !important; // Example override\n\n  @each $name, $pair in $my-colors {\n    $color: list.nth($pair, 1);\n    &.is-#{$name} {\n      &:not(.is-outlined):not(.is-inverted) {\n        // @include btn-gradient($color); // Apply custom mixin\n      }\n    }\n  }\n}\n\n.navbar:not(.is-transparent) {\n  // ... navbar overrides using $primary, $white, etc. ...\n}\n\n.hero.is-primary {\n  // ... hero overrides ...\n}\n*/\n// -----------------------------------------------------------------------------",
  "yeti/yeti.scss": "@use \"sass:list\";\n@use \"sass:meta\"; // For meta.type-of\n@use \"../utilities/css-variables\" as cv;\n@use \"../utilities/functions.scss\" as fn;\n@use \"../utilities/setup\";\n@use \"../utilities/derived-variables\" as dv;\n@use \"initial-variables\" as iv;\n// --- End of @use rules ---\n\n// Ensure the paths are correct relative to the new theme directory.\n\n// --- Theme Configuration ---\n// The main lightness of this theme (adjust if needed, e.g., for dark themes)\n$scheme-main-l: 100%;\n\n// The main scheme color, used for calculations\n$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);\n\n// --- Theme Mixin ---\n@mixin light-theme { // Assuming light theme for now\n  @include cv.register-vars(\n    (\n      \"hover-background-l-delta\": -5%,\n      \"active-background-l-delta\": -10%,\n      \"hover-border-l-delta\": -10%,\n      \"active-border-l-delta\": -20%,\n      \"hover-color-l-delta\": -5%,\n      \"active-color-l-delta\": -10%,\n      \"hover-shadow-a-delta\": \"-0.05\",\n      \"active-shadow-a-delta\": \"-0.1\",\n      \"scheme-brightness\": light,\n      \"scheme-main-l\": 100%,\n      \"scheme-main-bis-l\": 98%,\n      \"scheme-main-ter-l\": 96%,\n      \"background-l\": 96%,\n      \"border-weak-l\": 93%,\n      \"border-l\": 86%,\n      \"text-weak-l\": 48%,\n      \"text-l\": 29%,\n      \"text-strong-l\": 21%,\n      \"text-title-l\": 14%,\n      \"scheme-invert-ter-l\": 14%,\n      \"scheme-invert-bis-l\": 7%,\n      \"scheme-invert-l\": 4%,\n      \"duration\": 294ms,\n      \"easing\": ease-out,\n      \"radius-rounded\": 9999px,\n      \"speed\": 86ms,\n      \"burger-border-radius\": 0.5em,\n      \"burger-gap\": 5px,\n      \"burger-item-height\": 2px,\n      \"burger-item-width\": 20px,\n      \"arrow-color\": #{cv.getVar(\"link\")},\n      \"loading-color\": #{cv.getVar(\"border\")},\n      \"burger-h\": #{cv.getVar(\"link-h\")},\n      \"burger-s\": #{cv.getVar(\"link-s\")},\n      \"burger-l\": #{cv.getVar(\"link-l\")},\n      \"primary\": iv.$primary,\n      \"scheme-h\": iv.$scheme-h,\n      \"scheme-s\": iv.$scheme-s,\n      \"light-l\": iv.$light-l,\n      \"dark-l\": iv.$dark-l,\n      \"light-invert-l\": iv.$dark-l,\n      \"dark-invert-l\": iv.$light-l,\n      \"soft-l\": iv.$light-l,\n      \"bold-l\": iv.$dark-l,\n      \"soft-invert-l\": iv.$dark-l,\n      \"bold-invert-l\": iv.$light-l,\n      \"family-primary\": iv.$family-sans-serif,\n      \"family-secondary\": iv.$family-sans-serif,\n      \"family-code\": iv.$family-code,\n      \"size-small\": iv.$size-small,\n      \"size-normal\": iv.$size-normal,\n      \"size-medium\": iv.$size-medium,\n      \"size-large\": iv.$size-large,\n      \"weight-light\": iv.$weight-light,\n      \"weight-normal\": iv.$weight-normal,\n      \"weight-medium\": iv.$weight-medium,\n      \"weight-semibold\": iv.$weight-semibold,\n      \"weight-bold\": iv.$weight-bold,\n      \"weight-extrabold\": iv.$weight-extrabold,\n      \"block-spacing\": iv.$block-spacing,\n      \"radius-small\": iv.$radius-small,\n      \"radius\": iv.$radius,\n      \"radius-medium\": iv.$radius-medium,\n      \"radius-large\": iv.$radius-large\n\n    )\n  );\n\n  // --- Color Palette Generation ---\n  $no-palette: (\"white\", \"black\", \"light\", \"dark\"); // Colors without full palette\n\n  @each $name, $color-data in iv.$my-colors {\n    $base: $color-data;\n    $invert: null;\n    $light: null; // Placeholder for potential future use\n    $dark: null;  // Placeholder for potential future use\n\n    // Handle if $color-data is a list (base, invert, [light], [dark])\n    @if meta.type-of($color-data) == \"list\" {\n      $base: list.nth($color-data, 1);\n      @if list.length($color-data) > 1 {\n        $invert: list.nth($color-data, 2);\n      }\n      // Add logic here if light/dark variants are provided in the list\n      // @if list.length($color-data) > 3 {\n      //   $light: list.nth($color-data, 3);\n      //   $dark: list.nth($color-data, 4);\n      // }\n    }\n\n    // Generate the appropriate palette based on the color name\n    @if list.index($no-palette, $name) {\n      // Basic palette for white, black, light, dark\n      @include cv.generate-basic-palette($name, $base, $invert);\n    } @else {\n      // Full color palette for semantic colors (primary, info, etc.)\n      @include cv.generate-color-palette(\n        $name,\n        $base,\n        $scheme-main-l, // Pass the theme's main lightness\n        $invert,\n        $light, // Pass light/dark if available\n        $dark\n      );\n    }\n\n    // Generate text contrast colors (-on-scheme)\n    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);\n  }\n\n  // --- Shades, Shadow, Sizes (from derived-variables) ---\n  // These assume dv.$shades, dv.$shadow-color, dv.$sizes are defined correctly.\n  @each $name, $shade in dv.$shades {\n    @include cv.register-var($name, $shade);\n  }\n\n  @include cv.register-hsl(\"shadow\", dv.$shadow-color);\n\n  @each $size in dv.$sizes {\n    $i: list.index(dv.$sizes, $size);\n    $name: \"size-#{$i}\";\n    @include cv.register-var($name, $size);\n  }\n}"
}