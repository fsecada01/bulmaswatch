@use "sass:meta";
// C:/dev/javascript/bulmaswatch/cosmo/cosmo.scss

@use "sass:list";
@use "sass:color"; // Import sass:color

@use "../../utilities/css-variables" as cv;
@use "../../utilities/functions" as fn;
@use "../../utilities/setup";
@use "../../utilities/derived-variables" as dv; // Ensure this path is correct
@use "initial-variables" as iv; // Use the file created in step 1

// The main lightness of this theme (adjust as needed for Cosmo)
$scheme-main-l: 100%;

// The main scheme color, used to make calculations
$scheme-main: hsl(iv.$scheme-h, iv.$scheme-s, $scheme-main-l);

// Define the mixin to apply the theme
@mixin light-theme {
  // Register base variables needed for calculations and overrides
  // Adapt the list from cerulean/cerulean.scss, using iv.$... for values
  @include cv.register-vars(
                  (
                    // Basic Scheme Info
                          "primary": iv.$primary,
                          "scheme-h": iv.$scheme-h,
                          "scheme-s": iv.$scheme-s,
                          "light-l": iv.$light-l,
                          "light-invert-l": iv.$dark-l,
                          "dark-l": iv.$dark-l,
                          "dark-invert-l": iv.$light-l,
                    // Add soft/bold if needed
                          "scheme-main-l": $scheme-main-l,
                          "scheme-main-bis-l": 98%, // Example
                          "scheme-main-ter-l": 96%, // Example
                          "background-l": 96%, // Example
                          "border-weak-l": 93%, // Example
                          "border-l": 86%, // Example
                          "text-weak-l": 48%, // Example
                          "text-l": 29%, // Example
                          "text-strong-l": 21%, // Example
                          "text-title-l": 14%, // Example
                          "scheme-invert-ter-l": 14%, // Example
                          "scheme-invert-bis-l": 7%, // Example
                          "scheme-invert-l": 4%, // Example

                    // Deltas (copy from cerulean or adjust)
                          "hover-background-l-delta": -5%,
                          "active-background-l-delta": -10%,
                          "hover-border-l-delta": -10%,
                          "active-border-l-delta": -20%,
                          "hover-color-l-delta": -5%,
                          "active-color-l-delta": -10%,
                          "hover-shadow-a-delta": -0.05,
                          "active-shadow-a-delta": -0.1,

                    // Typography (use values from iv)
                          "family-primary": iv.$family-sans-serif, // Use the correct variable name
                          "family-secondary": dv.$family-secondary, // Or iv.$... if defined there
                          "family-code": dv.$family-code, // Or iv.$... if defined there
                          "size-small": dv.$size-small,
                          "size-normal": dv.$size-normal,
                          "size-medium": dv.$size-medium,
                          "size-large": dv.$size-large,
                          "weight-light": iv.$weight-light,
                          "weight-normal": iv.$weight-normal,
                          "weight-medium": iv.$weight-medium,
                          "weight-semibold": iv.$weight-semibold,
                          "weight-bold": iv.$weight-bold,
                          "weight-extrabold": iv.$weight-extrabold,

                    // Other (use values from iv)
                          "block-spacing": iv.$block-spacing,
                          "duration": 294ms, // Example
                          "easing": ease-out, // Example
                          "radius-small": iv.$radius-small,
                          "radius": iv.$radius,
                          "radius-medium": iv.$radius-medium,
                          "radius-large": iv.$radius-large,
                          "radius-rounded": 9999px,
                          "speed": 86ms, // Example

                    // Component specific (examples, adjust as needed)
                          "arrow-color": #{cv.getVar("link")},
                          "loading-color": #{cv.getVar("border")},
                          "burger-h": #{cv.getVar("link-h")},
                          "burger-s": #{cv.getVar("link-s")},
                          "burger-l": #{cv.getVar("link-l")},
                          "burger-border-radius": 0.5em,
                          "burger-gap": 5px,
                          "burger-item-height": 2px,
                          "burger-item-width": 20px,
                  )
  );

  // Colors - Generate palettes using the map from initial-variables
  $no-palette: ("white", "black", "light", "dark"); // Colors not needing full palette gen

  @each $name, $color-pair in iv.$my-colors { // Use the map from initial-variables
    $base: null;
    $invert: null;
    $light: null; // Optional light variant
    $dark: null;  // Optional dark variant

    // Extract values from the pair (which should be a list)
    @if meta.type-of($color-pair) == "list" {
      $base: list.nth($color-pair, 1);
      @if list.length($color-pair) > 1 {
        $invert: list.nth($color-pair, 2);
      } @else {
        // Fallback or error if invert is missing - crucial!
        @error "Color '#{$name}' in $my-colors is missing its invert value.";
      }
      // Add logic for light/dark if your map includes them (like Cerulean)
      // @if list.length($color-pair) > 3 {
      //   $light: list.nth($color-pair, 3);
      //   $dark: list.nth($color-pair, 4);
      // }
    } @else {
      @error "Color entry '#{$name}' in $my-colors is not a list.";
    }


    @if list.index($no-palette, $name) {
      // Generate simpler variables for basic colors like white/black
      @include cv.generate-basic-palette($name, $base, $invert);
    } @else {
      // Generate the full HSL palette for theme colors
      @include cv.generate-color-palette(
                      $name,
                      $base,
                      $scheme-main-l, // Base lightness for calculations
                      $invert,
                      $light, // Pass null if not defined
                      $dark   // Pass null if not defined
      );
    }

    // Generate on-scheme colors if needed (check if utilities/setup uses this)
    // @include cv.generate-on-scheme-colors($name, $base, $scheme-main);
  }

  // Shades (use derived variables or define in initial)
  @each $name, $shade in dv.$shades {
    @include cv.register-var($name, $shade);
  }

  // Shadow color
  @include cv.register-hsl("shadow", dv.$shadow-color); // Use derived shadow color

  // Sizes (use derived sizes)
  @each $size in dv.$sizes {
    $i: list.index(dv.$sizes, $size);
    $name: "size-#{$i}";
    @include cv.register-var($name, $size);
  }
}
